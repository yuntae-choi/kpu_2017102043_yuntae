2017182043 최윤태

1. 동료와 동시에 같은 페이지에서 작업시 동료에 의해 작업하는 내용이 쓰고 지워지는 것을 방지하기 위해 git은 쓰인다.

사용법

git init : 저장소 만들기

git clone/로컬/저장소/경로 : 로컬저장소를 복제하기
git clone 사용자명@호스트/원격/저장소/경로 : 원격서버의 저장소를 복사
작업 디렉토리 : 실제파일들로 이뤄져 있음
인덱스 : 준비영역의 역할
head : 최종 확정본
변경된파일은  git add<파일이름>,git add* 로 인덱스에 추가 가능
실제 변경내용을 확정하려면 git commit -m"이번 확정본에 대한 설명" 사용
head에 반영됨 하지만 원격저장소에는 반영 x
git push origin master : head를 원격서버로 올려보냄 다른 가지를 발행할려면 
master를 원하는 가지이름으로 변경
git remote add origin <원격 서버 주소> : 기본에 있던 원격 저장소를 복제한것이 아니라면
원격서버의 주소를 git에게 알려 줘야함
 
가지치기란? 가지는 안전하게 격리된 상태에서 무언가를 만들때 사용
저장소를 새로만들면 기본으로 master가지가 만들어지고 다른가지를 이용해서
개발을 진행하고 완료되면 master가지로 돌아와 병합한다
git checkout -b feature _x  : feature _x라는 이름의 가지를 만들고 갈아탄다
git checkout master : 아래명령으로 master가지로 돌아올수있다
git branch -d feature_x : 아래 명령으로 가지를 삭제할수있다
git push origin<가지이름> : 새로만든 가지를 원격 저장소로 전송하기 전까지는 다른사람들이 접근할수없다
git pull  : 로컬저장소를 우너격 저장소에 맞춰 갱신할려면 사용 
git merge<가지이름> : 다른가지에 잇는 변경 내용을 현재가지에 병합하려면 
git add <파일이름> : 병합에서 충돌발생 했을때 오류를 수정한 후 병합하려면
git add <파일이름>을 사용해서 병합한다
git diff <원래가지><비교대상가지> : 병합내용을 병합하기전에 어떻게 바뀌었는지 비교
소프트웨어의 새 버전을 발표할때마다 꼬리표를 달아놓으면 좋다 아래 명령를 실행하면 1.00을 달수있다
git tag 1.00 1b2e1d3ff
1b2e1d3ff : 꼬리표가 가리킬 확정본 식별자
git log : 확정본 식별자를 얻기위해 사용한다 
git checkout -- <파일이름> :실수했을때 로컬변경내용을 되돌릴수있다
로컬변경내용을 변경전 상태(head)로 되돌려주며 이미 인덱스에 추가된 변경내용가
새로 생성된 파일은 그대로 남는다
로컬에 있는 모든 변경 내용과 확정본을 포기 하려면
아리 명령으로 원격 저장소의 최신이력을 가져오고
로컬 master 가지가 저 이력을 가리키도록 할수있다
git fetch origin
gir rest -- hard oregin/master
gitk : git의 내장 gui
git config color.ui true : 콘솔에서 git output을 컬러로 출력하기 
git config format.pretty oneline : 이력(log)에서 확정본 1개를 딱 한줄로만 표시하기
git add -i : 파일을 추가할때 대화식으로 추가하기
2. 
>>> 1+2
3
>>> 100-1
99
>>> 7*52
364
>>> 1024/8
128.0
>>> 
>>> 1/2
0.5
>>> 1//2
0
>>> 7%3
1
>>> 7.5%3
1.5
>>> 4%2.1
1.9
>>> 3.14159265359793*(3*3)
28.27433388238137
>>> 3.14159265359793**2
9.869604401140485
>>> 3.14159265359793*3**2
28.27433388238137
>>> pi=3.14159265359793*
SyntaxError: invalid syntax
>>> pi=3.14159265359793
>>> 
>>> pi*4**2
50.26548245756688
>>> pi*2.5**2
19.634954084987065
>>> print(pi)
3.14159265359793
>>> r=7
>>> area = pi*r**2
>>> print(area)
153.93804002629858
>>> r=11
>>> print(area)
153.93804002629858
>>> print(r)
11
>>> print(area)
153.93804002629858
>>> area = pi*r**2
>>> print(area)
380.13271108534957
>>> name1 = "trump"
>>> name2= "트와이스"
>>> print(nmae1)
KeyboardInterrupt
>>> print(nmae1)
Traceback (most recent call last):
  File "<pyshell#30>", line 1, in <module>
    print(nmae1)
NameError: name 'nmae1' is not defined
>>> name1 = "trump"
>>> name2= "트와이스"
>>> print(name1)
trump
>>> print(name2)
트와이스
>>> type(order)
Traceback (most recent call last):
  File "<pyshell#35>", line 1, in <module>
    type(order)
NameError: name 'order' is not defined
>>> type(name1)
<class 'str'>
>>> 4>2
True
>>> 3.5<-1.3
False
>>> 100==100
True
>>> 10>=10
True
>>> a=365>366
>>> print(a)
False
>>> type(a)
<class 'bool'>
>>> first="yun"
>>> last"tae"
SyntaxError: invalid syntax
>>> last="tae
SyntaxError: EOL while scanning string literal
>>> last="tae"
>>> name = first+""+last
>>> name
'yuntae'
>>> print(name)
yuntae
>>> nmae*2
Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    nmae*2
NameError: name 'nmae' is not defined
>>> name*2
'yuntaeyuntae'
>>> name[0]
'y'
>>> name[1]
'u'
>>> name[-1]
'e'
>>> title = "abcd"
>>> title[0:2]
'ab'
>>> title[::-1]
'dcba'
>>> twice=['momo','sana','zwi']
>>> twice
['momo', 'sana', 'zwi']
>>> len(twice)
3
>>> bp=['jisu']
>>> unite = twice+bp
>>> unite
['momo', 'sana', 'zwi', 'jisu']
>>> score = {'momo':80,'zwi':20000}
>>> type(score)
<class 'dict'>
>>> score[zwi]
Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    score[zwi]
NameError: name 'zwi' is not defined
>>> score['zwi']
20000
>>> t1 = (1,2,3)
>>> t5=(1,'a',"park",(1,2))
>>> t1+t5
(1, 2, 3, 1, 'a', 'park', (1, 2))
>>> t1*2
(1, 2, 3, 1, 2, 3)
>>> s1={1,2,3}
>>> type(s1)
<class 'set'>
>>> s1={1,2,2,4}
>>> s1
{1, 2, 4}
>>> l1=[1,2,2,2,2,2,3,3,3,3,5,5,5,5]
>>> s1= set(l1)
>>> s1
{1, 2, 3, 5}
>>> s2={3,5,6,7}
>>> s1+s2
Traceback (most recent call last):
  File "<pyshell#81>", line 1, in <module>
    s1+s2
TypeError: unsupported operand type(s) for +: 'set' and 'set'
>>> s1|s2
{1, 2, 3, 5, 6, 7}
>>> s1&s2
{3, 5}
>>> s2-s1
{6, 7}
>>> s1-s2
{1, 2}
>>> s1.add(8)
>>> s1
{1, 2, 3, 5, 8}
>>> s2.remove(6)
>>> s2
{3, 5, 7}